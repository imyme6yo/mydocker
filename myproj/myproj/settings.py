"""
Django settings for myproj project.

Generated by 'django-admin startproject' using Django 3.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
from pathlib import Path
from datetime import timedelta

MODE = os.getenv("MODE")
IP_MAIN = os.getenv("IP_MAIN")
PROJECT = os.getenv("PROJECT")
SERVICE = os.getenv("SERVICE")
APP = os.getenv("APP")
DEBUG = os.getenv("DEBUG")

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# __file__ : /opt/${PROJECT}/${SERVICE}/${PROJECT}/settings.py
# __file__ : /opt/jupiter/book/jupiter/settings.py
# os.path.dirname(__file__) : /opt/${PROJECT}/${SERVICE}/${PROJECT}
# os.path.dirname(__file__) : /opt/jupiter/book/jupiter
# os.path.dirname(os.path.dirname(__file__)) : /opt/${PROJECT}/${SERVICE}/
# os.path.dirname(os.path.dirname(__file__)) : /opt/jupiter/book/
BASE_DIR = os.path.dirname(os.path.dirname(__file__))
# BASE_DIR = os.path.join('/opt', os.path.join(PROJECT, SERVICE))
STATIC_BASE_DIR = Path('/www')
LOG_BASE_DIR = os.path.join(Path('/var/log'), os.path.join(PROJECT, SERVICE))
FILE_BASE_DIR = os.path.join(Path('/var/opt'), os.path.join(PROJECT, SERVICE))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '8!_zw_xc+6mpan8!+at)^+t$p8x^aw^gse6*35x)+0!^syr9d^'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# SECURITY WARNING: don't run with debug turned on in production!
# CORS_ORIGIN_WHITELIST = [
#     "http://readjupiter.com", 
#     "http://www.readjupiter.com", 
#     "https://readjupiter.com", 
#     "https://www.readjupiter.com", 
#     "http://" + IP_MAIN, 
#     "https://" + IP_MAIN]
# ALLOWED_HOSTS = ['*']
# if MODE == 'PROD':
#     CORS_ORIGIN_ALLOW_ALL = False
#     CORS_ORIGIN_WHITELIST = [
#         "http://readjupiter.com", 
#         "http://www.readjupiter.com", 
#         "https://readjupiter.com", 
#         "https://www.readjupiter.com", 
#         "http://" + IP_MAIN, 
#         "https://" + IP_MAIN]
# elif MODE == 'DEV':
#     CORS_ORIGIN_ALLOW_ALL = True
#     CORS_ALLOW_ALL_ORIGINS = True
#     CORS_ALLOW_CREDENTIALS = True
# else:
#     CORS_ORIGIN_ALLOW_ALL = True
#     CORS_ALLOW_ALL_ORIGINS = True
#     CORS_ALLOW_CREDENTIALS = True

# CORS_ALLOW_HEADERS = [
#     'accept',
#     'accept-encoding',
#     'authorization',
#     'content-type',
#     'content-range',
#     'origin',
#     'user-agent',
#     'x-csrftoken',
#     'x-requested-with',
# ]

# Application definition
my_app = [APP] if APP else []
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'django_extensions',
    'django_filters',
    'rest_framework',
    'rest_framework_swagger',
    'drf_chunked_upload',
] + my_app

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'request_logging.middleware.LoggingMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = '{}.urls'.format(PROJECT)

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = '{}.wsgi.application'.format(PROJECT)


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASE_NAME = os.getenv('DATABASE_DB')
DATABASE_USERNAME = os.getenv('DATABASE_USER')
DATABASE_PASSWORD = os.getenv('DATABASE_PASSWORD')
DATABASE_HOST = os.getenv('DATABASE_HOST')
DATABASE_PORT = os.getenv('DATABASE_PORT')
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': DATABASE_NAME,
        'USER': DATABASE_USERNAME,
        'PASSWORD': DATABASE_PASSWORD,
        'HOST': DATABASE_HOST,
        'PORT': DATABASE_PORT,
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

DRF_CHUNKED_UPLOAD_ABSTRACT_MODEL = False

ABSTRACT_MODEL = False
CHECKSUM_TYPE = 'md5'
COMPLETE_EXT = '.done'
EXPIRATION_DELTA = timedelta(days=1)
INCOMPLETE_EXT = '.part'
STORAGE = (lambda: None)()
UPLOAD_PATH = 'chunked_uploads/%Y/%m/%d'
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/
STATIC_URL = '/static/'
STATIC_ROOT = os.path.abspath(STATIC_BASE_DIR)

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.abspath(FILE_BASE_DIR)

LOG_FILE = os.path.join(LOG_BASE_DIR, '{}.log'.format(APP)) 
LOGGING = { 
    'version': 1, 
    'disable_existing_loggers': False, 
    'formatters': { 
        'verbose': { 
            'format' : "[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s", 'datefmt' : "%d/%b/%Y %H:%M:%S" 
        }, 
        'simple': { 
            'format': '%(levelname)s %(message)s' 
        }, 
    }, 
    'handlers': { 
        'file': { 
            'level': 'DEBUG', 
            'class': 'logging.handlers.RotatingFileHandler', 
            'filename': LOG_FILE, 
            'formatter': 'verbose', 
            'maxBytes':1024*1024*10, 
            'backupCount':5, 
        }, 
        'console': { 
            'level': 'DEBUG', 
            'class': 'logging.StreamHandler', 
            'formatter': 'verbose', 
        }, 
    }, 
    'loggers': { 
        'django': { 
            'handlers':['file'], 
            'propagate': True, 
            'level':'DEBUG', 
        }, 
        'django.request': { 
            'handlers':['console', 'file'], 
            'propagate': False, 
            'level':'DEBUG', 
        }, 
        'rest_framework.request': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        # 'myAppName': { 'handlers': ['file'], 'level': 'DEBUG', }, 
    } 
}

os.makedirs(STATIC_BASE_DIR, exist_ok=True)
os.makedirs(MEDIA_ROOT, exist_ok=True)
os.makedirs(LOG_BASE_DIR, exist_ok=True)